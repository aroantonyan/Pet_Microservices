version: "3.9"

services:
  rabbitmq:
    image: rabbitmq:3.13-management
    hostname: rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "5674:5672"   
      - "15674:15672" 
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - backend

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend

  price-service:
    platform: linux/amd64
    build:
      context: ./PriceService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "5001:8080"
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy 

  log-service:
    platform: linux/amd64
    build:
      context: ./LogService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "5003:8080"
    volumes:
      - ./logservice_logs:/app/logs
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy

  product-service:
    platform: linux/amd64
    build:
      context: ./ProductService
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Docker
      ASPNETCORE_URLS: http://+:8080
    ports:
      - "5002:8080"
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_healthy  
      price-service:
        condition: service_started   

networks:
  backend:

volumes:
  redis-data:
